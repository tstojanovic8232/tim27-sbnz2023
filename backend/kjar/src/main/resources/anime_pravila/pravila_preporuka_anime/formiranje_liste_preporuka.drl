package pravila_preporuka_anime;

import com.ftn.sbnz.tim27.model.models.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.stream.Collectors;

rule "prebroji anime zanrove iz trenutne liste korisnika"
salience 20
when
    $korisnik: Korisnik($animeLista: trenutno_gledanje)
    $anime: Anime(zanrovi != null, !zanrovi.isEmpty()) from $animeLista
    $zanr: Zanr() from $anime.getZanrovi()
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId()) from $brojaci
then
    $zanrBrojac.povecajBrojac();
//    System.out.println($zanrBrojac);
end

rule "prebroji anime zanrove iz istorije gledanja korisnika"
salience 19
when
    $korisnik: Korisnik($animeLista: istorija)
    $anime: Anime(zanrovi != null, !zanrovi.isEmpty()) from $animeLista
    $zanr: Zanr() from $anime.getZanrovi()
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId()) from $brojaci
then
    $zanrBrojac.povecajBrojac();
//    System.out.println($zanrBrojac);
end

rule "prebroji anime zanrove iz liste planiranih naslova korisnika"
salience 18
when
    $korisnik: Korisnik($animeLista: planira_gledanje)
    $anime: Anime(zanrovi != null, !zanrovi.isEmpty()) from $animeLista
    $zanr: Zanr() from $anime.getZanrovi()
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId()) from $brojaci
then
    $zanrBrojac.povecajBrojac();
//    System.out.println($zanrBrojac);
end

rule "prebroji anime studija iz trenutne liste korisnika"
salience 17
when
    $korisnik: Korisnik($animeLista: trenutno_gledanje)
    $anime: Anime(studiji != null) from $animeLista
    $studio: Studio() from $anime.getStudiji()
    $brojaci: List() from collect(StudioBrojac())
    $studioBrojac: StudioBrojac(studio.id == $studio.getId()) from $brojaci
then
    $studioBrojac.povecajBrojac();
//    System.out.println($studioBrojac);
end

rule "prebroji anime studija iz istorije gledanja korisnika"
salience 16
when
    $korisnik: Korisnik($animeLista: istorija)
    $anime: Anime(studiji != null) from $animeLista
    $studio: Studio() from $anime.getStudiji()
    $brojaci: List() from collect(StudioBrojac())
    $studioBrojac: StudioBrojac(studio.id == $studio.getId()) from $brojaci
then
    $studioBrojac.povecajBrojac();
//    System.out.println($studioBrojac);
end

rule "prebroji anime studija iz liste planiranih naslova korisnika"
salience 15
when
    $korisnik: Korisnik($animeLista: planira_gledanje)
    $anime: Anime(studiji != null) from $animeLista
    $studio: Studio() from $anime.getStudiji()
    $brojaci: List() from collect(StudioBrojac())
    $studioBrojac: StudioBrojac(studio.id == $studio.getId()) from $brojaci
then
    $studioBrojac.povecajBrojac();
//    System.out.println($studioBrojac);
end

rule "nadji najgledaniji anime zanr"
salience 14
when
    $zanrBrojaci: List() from collect(ZanrBrojac())
    $maxBrojac: Integer() from accumulate(
        ZanrBrojac($brojac : brojac) from $zanrBrojaci,
        max($brojac)
    )
    $najgledanijiZanrovi: List() from collect(
        ZanrBrojac(brojac == $maxBrojac) from $zanrBrojaci
    )
    not(ZanrBrojac(brojac > $maxBrojac) from $zanrBrojaci)
then
//    System.out.println($najgledanijiZanrovi);
    for (Object item : $najgledanijiZanrovi) {
        System.out.println(((ZanrBrojac)item).getZanr());
        insert(((ZanrBrojac)item).getZanr());
    }
end

rule "nadji najgledaniji anime studio"
salience 13
when
    $studioBrojaci: List() from collect(StudioBrojac())
    $maxBrojac: Integer() from accumulate(
        StudioBrojac($brojac : brojac) from $studioBrojaci,
        max($brojac)
    )
    $najgledanijiStudiji: List() from collect(
        StudioBrojac(brojac == $maxBrojac) from $studioBrojaci
    )
    not(StudioBrojac(brojac > $maxBrojac) from $studioBrojaci)
then
//    System.out.println($najgledanijiStudiji);
    for (Object item : $najgledanijiStudiji) {
        System.out.println(((StudioBrojac)item).getStudio());
        insert(((StudioBrojac)item).getStudio());
    }
end

rule "Pokupi anime po zanru"
salience 10
when
    $zanr: Zanr()
    $list: List()
    $templist: List() from collect(Anime(zanrovi contains $zanr, !($list contains this)))
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId(), brojac > 0) from $brojaci
then
//    System.out.println("Zanr: " + $zanr);
    modify($list) {
        addAll($templist);
    }
    $zanrBrojac.smanjiBrojac();
end

rule "Pokupi anime po studiju"
salience 9
when
    $studio: Studio()
    $list: List()
    $templist: List() from collect(Anime(studiji contains $studio, !($list contains this)))
    $brojaci: List() from collect(StudioBrojac())
    $studioBrojac: StudioBrojac(studio.id == $studio.getId(), brojac > 0) from $brojaci
then
//    System.out.println("Studio: " + $studio);
    modify($list) {
        addAll($templist);
    }
    $studioBrojac.smanjiBrojac();
end

rule "Izbaci duplikate"
salience 8
when
    $list: List()
    $set: HashSet() from new HashSet($list)
then
    $list.clear();
    $list.addAll($set);
    update($list);
end

rule "Izbaci anime ako je vec na listi korisnika"
salience 5
when
  $korisnik: Korisnik()
  $list: List()
  $anime: Anime(this memberOf $list)
  eval($korisnik.getTrenutno_gledanje().contains($anime) ||
       $korisnik.getIstorija().contains($anime) ||
       $korisnik.getPlanira_gledanje().contains($anime) ||
       $korisnik.getOdustao_gledanje().contains($anime) ||
       $korisnik.getCrna_lista().contains($anime))
then
//    System.out.println("Anime id: " + $anime.getId());
  modify($list) {
    remove($anime);
  }
end
