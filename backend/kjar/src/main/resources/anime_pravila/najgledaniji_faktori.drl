package anime_pravila;
import com.ftn.sbnz.tim27.model.models.*;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

rule "nadji najgledanije anime zanrove za korisnika"
    when
        $korisnik: Korisnik($lt: trenutno_gledanje, $li: istorija, $lp: planira_gledanje)
        then
            Map<String, Integer> zanrCountMap = new HashMap<>();

            for (Anime anime : $lt) {
                List<Zanr> zanrovi = anime.getZanrovi();
                izbrojiFaktore(zanrovi, zanrCountMap);
            }

            for (Anime anime2 : $li) {
                zanrovi = anime2.getZanrovi();
                izbrojiFaktore(zanrovi, zanrCountMap);
            }

            for (Anime anime3 : $lp) {
                zanrovi = anime3.getZanrovi();
                izbrojiFaktore(zanrovi, zanrCountMap);
            }

        List<Map.Entry<String, Integer>> sortiraniZanrovi = new ArrayList<>(zanrCountMap.entrySet());
        Collections.sort(sortiraniZanrovi, Comparator.comparingInt(Map.Entry::getValue));

        List<String> najgledanijiZanrovi = new ArrayList<>();
        int limit = Math.min(3, sortiraniZanrovi.size());
        for (int i = sortiraniZanrovi.size() - 1; i >= sortiraniZanrovi.size() - limit; i--) {
            najgledanijiZanrovi.add(sortiraniZanrovi.get(i).getKey());
        }

        insert(najgledanijiZanrovi)

end

rule "nadji najgledanija studija animacije za korisnika"
    when
            $korisnik: Korisnik($lt: trenutno_gledanje, $li: istorija, $lp: planira_gledanje)
            then
                Map<String, Integer> studioCountMap = new HashMap<>();

                for (Anime anime : $lt) {
                    List<Studio> studija = anime.getStudiji();
                    izbrojiFaktore(studija, studioCountMap);
                }

                for (Anime anime2 : $li) {
                    studija = anime.getStudiji();
                    izbrojiFaktore(studija, studioCountMap);
                }

                for (Anime anime3 : $lp) {
                    studija = anime.getStudiji();
                    izbrojiFaktore(studija, studioCountMap);
                }

            List<Map.Entry<String, Integer>> sortiraniStudiji = new ArrayList<>(studioCountMap.entrySet());
            Collections.sort(sortiraniStudiji, Comparator.comparingInt(Map.Entry::getValue));

            List<String> najgledanijiStudiji = new ArrayList<>();
            int limit = Math.min(3, sortiraniStudiji.size());
            for (int i = sortiraniStudiji.size() - 1; i >= sortiraniStudiji.size() - limit; i--) {
                najgledanijiStudiji.add(sortiraniStudiji.get(i).getKey());
            }

            insert(najgledanijiStudiji)

    end

function void izbrojiFaktore(List<Object> faktori, Map<String, Integer> countMap) {
     for (Object obj : faktori) {
        if (obj instanceof Zanr) {
            Zanr zanr = (Zanr) obj;
            String naziv = zanr.getNaziv();
            countMap.put(naziv, (Integer) countMap.getOrDefault(naziv, 0) + 1);
        }
        if (obj instanceof Studio) {
            Studio studio = (Studio) obj;
            String naziv = studio.getNaziv();
            countMap.put(naziv, (Integer) countMap.getOrDefault(naziv, 0) + 1);
        }
    }
}

