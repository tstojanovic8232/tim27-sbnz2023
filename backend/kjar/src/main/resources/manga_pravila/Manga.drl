import com.ftn.sbnz.tim27.model.models.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;

rule "prebroji manga zanrove iz trenutne liste korisnika"
when
    $korisnik: Korisnik($mangaLista: trenutno_citanje)
    $manga: Manga(lista_zanrova != null, !lista_zanrova.isEmpty()) from $mangaLista
    $zanr: Zanr() from $manga.getLista_zanrova()
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId()) from $brojaci
then
//    modify($zanrBrojac){
//        brojac = brojac + 1
//    }

    $zanrBrojac.povecajBrojac();
end

rule "prebroji manga zanrove iz istorije citanja korisnika"
when
    $korisnik: Korisnik($mangaLista: istorija2)
    $manga: Manga(lista_zanrova != null, !lista_zanrova.isEmpty()) from $mangaLista
    $zanr: Zanr() from $manga.getLista_zanrova()
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId()) from $brojaci
then
//    modify($zanrBrojac){
//        brojac = brojac + 1
//    }

    $zanrBrojac.povecajBrojac();
end

rule "prebroji manga zanrove iz liste planiranih naslova korisnika"
when
    $korisnik: Korisnik($mangaLista: planira_citanje)
    $manga: Manga(lista_zanrova != null, !lista_zanrova.isEmpty()) from $mangaLista
    $zanr: Zanr() from $manga.getLista_zanrova()
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId()) from $brojaci
then
//    modify($zanrBrojac){
//        brojac = brojac + 1
//    }

    $zanrBrojac.povecajBrojac();
end

rule "nadji najcitaniji manga zanr"
when
    $zanrBrojaci: List() from collect(ZanrBrojac())
    $maxBrojac: Integer() from accumulate(
        ZanrBrojac($brojac : brojac) from $zanrBrojaci,
        max($brojac)
    )
    $najgledanijiZanrovi: List() from collect(
        ZanrBrojac(brojac == $maxBrojac) from $zanrBrojaci
    )
    not(ZanrBrojac(brojac > $maxBrojac) from $zanrBrojaci)

then
//    System.out.println($najgledanijiZanrovi);
    for (Object item : $najgledanijiZanrovi) {
//        System.out.println(((ZanrBrojac)item).getZanr());
        insert(((ZanrBrojac)item).getZanr());
    }
end


rule "Pokupi mangu po zanru"
salience 10
when
    $zanr: Zanr()
    $list: List()
    $templist: List() from collect(Manga(lista_zanrova contains $zanr, !($list contains this)))
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId(), brojac > 0) from $brojaci
then
    System.out.println("Zanr: " + $zanr);
    modify($list) {
        addAll($templist);
    }
    $zanrBrojac.smanjiBrojac();
end

rule "Izbaci duplikate"
salience 8
when
    $list: List()
    $set: HashSet() from new HashSet($list)
then
    $list.clear();
    $list.addAll($set);
    update($list);
end

rule "Izbaci mangu ako je vec na listi korisnika"
salience 5
when
  $korisnik: Korisnik()
  $list: List()
  $manga: Manga(this memberOf $list)
  eval($korisnik.getTrenutno_citanje().contains($manga) ||
       $korisnik.getIstorija2().contains($manga) ||
       $korisnik.getPlanira_citanje().contains($manga) ||
       $korisnik.getOdustao_citanje().contains($manga) ||
       $korisnik.getCrna_lista2().contains($manga))
then
   System.out.println("Manga id: " + $manga.getId());
  modify($list) {
    remove($manga);
  }
end

