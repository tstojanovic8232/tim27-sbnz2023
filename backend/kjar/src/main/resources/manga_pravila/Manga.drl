import com.ftn.sbnz.tim27.model.models.*;
import java.util.List;

rule "prebroji manga zanrove iz trenutne liste korisnika"
when
    $korisnik: Korisnik($mangaLista: trenutno_citanje)
    $manga: Manga(lista_zanrova != null, !lista_zanrova.isEmpty()) from $mangaLista
    $zanr: Zanr() from $manga.getLista_zanrova()
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId()) from $brojaci
then
//    modify($zanrBrojac){
//        brojac = brojac + 1
//    }

    $zanrBrojac.povecajBrojac();
end

rule "prebroji manga zanrove iz istorije citanja korisnika"
when
    $korisnik: Korisnik($mangaLista: istorija2)
    $manga: Manga(lista_zanrova != null, !lista_zanrova.isEmpty()) from $mangaLista
    $zanr: Zanr() from $manga.getLista_zanrova()
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId()) from $brojaci
then
//    modify($zanrBrojac){
//        brojac = brojac + 1
//    }

    $zanrBrojac.povecajBrojac();
end

rule "prebroji manga zanrove iz liste planiranih naslova korisnika"
when
    $korisnik: Korisnik($mangaLista: planira_citanje)
    $manga: Manga(lista_zanrova != null, !lista_zanrova.isEmpty()) from $mangaLista
    $zanr: Zanr() from $manga.getLista_zanrova()
    $brojaci: List() from collect(ZanrBrojac())
    $zanrBrojac: ZanrBrojac(zanr.id == $zanr.getId()) from $brojaci
then
//    modify($zanrBrojac){
//        brojac = brojac + 1
//    }

    $zanrBrojac.povecajBrojac();
end

rule "nadji najcitaniji manga zanr"
when
    $zanrBrojaci: List() from collect(ZanrBrojac())
    $maxBrojac: Integer() from accumulate(
        ZanrBrojac($brojac : brojac) from $zanrBrojaci,
        max($brojac)
    )
    $najgledanijiZanrovi: List() from collect(
        ZanrBrojac(brojac == $maxBrojac) from $zanrBrojaci
    )
    not(ZanrBrojac(brojac > $maxBrojac) from $zanrBrojaci)
    $najgledanijiZanr: ZanrBrojac() from $najgledanijiZanrovi.get(0)
then

    insert($najgledanijiZanr.getZanr());
end

rule "Collect up to 50 Manga per Genre"
when
    $zanr: Zanr()
    $allManga: List()
    $collectedManga: List(size < 300)

    $additionalManga: List() from collect(Manga(this memberOf $allManga, lista_zanrova contains $zanr, not($collectedManga contains this)))

    eval($additionalManga.size() > 0)

    $numToAdd: Integer() from eval(Math.min($additionalManga.size(), 50))
    $numToLimit: Integer() from eval(Math.min($numToAdd, 300 - $collectedManga.size()))

    $additionalMangaLimited: List() from $additionalManga.subList(0, $numToLimit)
then
    $collectedManga.addAll($additionalMangaLimited);
    update($collectedManga);
end


